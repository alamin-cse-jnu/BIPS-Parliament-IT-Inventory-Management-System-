# Generated by Django 4.2.7 on 2025-08-17 09:42

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Maintenance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maintenance_id', models.CharField(blank=True, help_text='Auto-generated maintenance ID (MNT-YYYY-NNNN)', max_length=50, unique=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for tracking', unique=True)),
                ('maintenance_type', models.CharField(choices=[('PREVENTIVE', 'Preventive Maintenance'), ('CORRECTIVE', 'Corrective Maintenance'), ('EMERGENCY', 'Emergency Repair'), ('UPGRADE', 'Hardware Upgrade'), ('INSPECTION', 'Safety Inspection'), ('CLEANING', 'Deep Cleaning'), ('CALIBRATION', 'Calibration'), ('REPLACEMENT', 'Component Replacement'), ('WARRANTY', 'Warranty Service'), ('OTHER', 'Other Service')], default='PREVENTIVE', help_text='Type of maintenance being performed', max_length=20)),
                ('priority', models.CharField(choices=[('LOW', 'Low Priority'), ('MEDIUM', 'Medium Priority'), ('HIGH', 'High Priority'), ('CRITICAL', 'Critical - Immediate'), ('EMERGENCY', 'Emergency - Urgent')], default='MEDIUM', help_text='Priority level for this maintenance', max_length=20)),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('IN_PROGRESS', 'In Progress'), ('ON_HOLD', 'On Hold'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled'), ('FAILED', 'Failed/Unsuccessful')], default='SCHEDULED', help_text='Current status of maintenance', max_length=20)),
                ('start_date', models.DateField(help_text='Scheduled start date for maintenance')),
                ('expected_end_date', models.DateField(help_text='Expected completion date')),
                ('actual_start_date', models.DateTimeField(blank=True, help_text='Actual date/time when maintenance started', null=True)),
                ('actual_end_date', models.DateTimeField(blank=True, help_text='Actual date/time when maintenance completed', null=True)),
                ('provider_type', models.CharField(choices=[('INTERNAL', 'Internal IT Team'), ('VENDOR', 'External Vendor'), ('MANUFACTURER', 'Manufacturer Service'), ('THIRD_PARTY', 'Third Party Service')], default='INTERNAL', help_text='Type of service provider', max_length=20)),
                ('technician_name', models.CharField(blank=True, help_text='Name of primary technician', max_length=100)),
                ('technician_contact', models.CharField(blank=True, help_text='Contact number for technician', max_length=15)),
                ('estimated_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Estimated cost for maintenance (BDT)', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('actual_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Actual cost incurred (BDT)', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('parts_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Cost of replacement parts (BDT)', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('labor_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Labor cost (BDT)', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('title', models.CharField(help_text='Brief title describing the maintenance', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of maintenance required')),
                ('problem_reported', models.TextField(blank=True, help_text='Description of reported problem/issue')),
                ('work_performed', models.TextField(blank=True, help_text='Detailed description of work performed')),
                ('parts_replaced', models.TextField(blank=True, help_text='List of parts/components replaced')),
                ('result', models.CharField(blank=True, choices=[('SUCCESS', 'Successful - Device Fully Operational'), ('PARTIAL', 'Partial Success - Limited Functionality'), ('FAILED', 'Failed - Device Still Non-functional'), ('REPLACED', 'Component/Device Replaced'), ('UPGRADED', 'Successfully Upgraded'), ('PENDING', 'Pending Further Action')], help_text='Result/outcome of maintenance', max_length=20)),
                ('result_notes', models.TextField(blank=True, help_text='Additional notes about maintenance result')),
                ('satisfaction_rating', models.PositiveSmallIntegerField(blank=True, help_text='Service satisfaction rating (1-5 stars)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('downtime_hours', models.DecimalField(blank=True, decimal_places=2, help_text='Total downtime in hours', max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('follow_up_required', models.BooleanField(default=False, help_text='Whether follow-up maintenance is required')),
                ('follow_up_date', models.DateField(blank=True, help_text='Scheduled follow-up date', null=True)),
                ('next_maintenance_due', models.DateField(blank=True, help_text='Next scheduled maintenance date', null=True)),
                ('requires_approval', models.BooleanField(default=False, help_text='Whether this maintenance requires management approval')),
                ('approved_at', models.DateTimeField(blank=True, help_text='Date/time when maintenance was approved', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this maintenance record is active')),
                ('is_warranty_service', models.BooleanField(default=False, help_text='Whether this is covered under warranty')),
                ('internal_notes', models.TextField(blank=True, help_text='Internal notes for IT team (not visible to users)')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date/time when record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date/time when record was last updated')),
            ],
            options={
                'verbose_name': 'Maintenance Record',
                'verbose_name_plural': 'Maintenance Records',
                'db_table': 'pims_maintenance',
                'ordering': ['-start_date', '-created_at'],
                'permissions': [('view_maintenance_costs', 'Can view maintenance costs'), ('approve_maintenance', 'Can approve maintenance requests'), ('manage_emergency_maintenance', 'Can manage emergency maintenance'), ('view_internal_notes', 'Can view internal maintenance notes')],
            },
        ),
    ]
