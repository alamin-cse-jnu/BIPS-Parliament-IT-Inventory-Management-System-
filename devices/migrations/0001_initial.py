# Generated by Django 4.2.7 on 2025-08-17 09:42

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(help_text='Unique device identifier (auto-generated if empty)', max_length=50, unique=True)),
                ('device_type', models.CharField(choices=[('COMPLETE', 'Complete Device'), ('COMPONENT', 'Component'), ('ACCESSORY', 'Accessory')], default='COMPLETE', help_text='Type of device - Complete device, Component, or Accessory', max_length=20)),
                ('brand', models.CharField(help_text='Device brand/manufacturer (e.g., Dell, HP, Cisco, Intel)', max_length=100)),
                ('model', models.CharField(help_text='Device model number/name', max_length=150)),
                ('serial_number', models.CharField(help_text='Manufacturer serial number', max_length=100, unique=True)),
                ('asset_tag', models.CharField(blank=True, help_text='Internal asset tag number', max_length=50)),
                ('status', models.CharField(choices=[('AVAILABLE', 'Available'), ('ASSIGNED', 'Assigned'), ('MAINTENANCE', 'In Maintenance'), ('RETIRED', 'Retired'), ('LOST', 'Lost/Missing'), ('DAMAGED', 'Damaged')], default='AVAILABLE', help_text='Current device status', max_length=20)),
                ('condition', models.CharField(choices=[('NEW', 'New'), ('EXCELLENT', 'Excellent'), ('GOOD', 'Good'), ('FAIR', 'Fair'), ('POOR', 'Poor'), ('DAMAGED', 'Damaged')], default='NEW', help_text='Physical condition of device', max_length=20)),
                ('priority', models.CharField(choices=[('LOW', 'Low Priority'), ('MEDIUM', 'Medium Priority'), ('HIGH', 'High Priority'), ('CRITICAL', 'Critical')], default='MEDIUM', help_text='Device priority level', max_length=20)),
                ('purchase_date', models.DateField(help_text='Date when device was purchased')),
                ('purchase_price', models.DecimalField(decimal_places=2, help_text='Purchase price in BDT', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('specifications', models.JSONField(blank=True, default=dict, help_text='\n        Device specifications in JSON format. Examples:\n        Desktop/Laptop: {"cpu": "Intel i5-12400", "ram": "16GB DDR4", "storage": "512GB SSD", "monitor": "24 inch Dell"}\n        Pendrive: {"capacity": "64GB", "type": "USB 3.0", "interface": "USB-A"}\n        Router: {"model": "Cisco ISR 4000", "ports": "24 Port Gigabit", "wifi": "802.11ac"}\n        RAM: {"size": "8GB", "type": "DDR4", "speed": "3200MHz", "form_factor": "DIMM"}\n        ')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this device')),
                ('barcode', models.CharField(blank=True, help_text='Internal barcode if different from device_id', max_length=100)),
                ('depreciation_rate', models.DecimalField(decimal_places=2, default=Decimal('20.00'), help_text='Annual depreciation rate percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('is_active', models.BooleanField(default=True, help_text='Whether device is active in inventory')),
                ('is_assignable', models.BooleanField(default=True, help_text='Whether device can be assigned to users')),
                ('requires_approval', models.BooleanField(default=False, help_text='Whether assignment requires special approval')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Device',
                'verbose_name_plural': 'Devices',
                'db_table': 'devices_device',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DeviceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Category name (e.g., Computers, Storage, Network Equipment)', max_length=100, unique=True)),
                ('code', models.CharField(help_text='Short code for category (e.g., COMP, STOR, NET)', max_length=10, unique=True)),
                ('description', models.TextField(blank=True, help_text='Detailed description of this device category')),
                ('icon_class', models.CharField(default='bi-laptop', help_text='Bootstrap icon class for UI display', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this category is actively used')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Display order (lower numbers appear first)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Device Category',
                'verbose_name_plural': 'Device Categories',
                'db_table': 'devices_category',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DeviceSubcategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Subcategory name (e.g., Laptops, Desktop Computers, RAM)', max_length=100)),
                ('code', models.CharField(help_text='Short code (e.g., LAP, DESK, RAM)', max_length=15)),
                ('description', models.TextField(blank=True, help_text='Detailed description of this subcategory')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this subcategory is actively used')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Display order within category')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Device Subcategory',
                'verbose_name_plural': 'Device Subcategories',
                'db_table': 'devices_subcategory',
                'ordering': ['category', 'sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='QRCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qr_code_id', models.UUIDField(default=uuid.uuid4, help_text='Unique QR code identifier', unique=True)),
                ('qr_code', models.ImageField(help_text='Generated QR code image', upload_to='qrcodes/devices/')),
                ('qr_data', models.TextField(help_text='Data encoded in the QR code')),
                ('size', models.PositiveIntegerField(default=200, help_text='QR code size in pixels')),
                ('format', models.CharField(default='PNG', help_text='Image format', max_length=10)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this QR code is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'QR Code',
                'verbose_name_plural': 'QR Codes',
                'db_table': 'devices_qrcode',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Warranty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('warranty_type', models.CharField(choices=[('MANUFACTURER', 'Manufacturer Warranty'), ('EXTENDED', 'Extended Warranty'), ('MAINTENANCE', 'Maintenance Contract'), ('SUPPORT', 'Support Contract'), ('INSURANCE', 'Insurance Coverage')], default='MANUFACTURER', help_text='Type of warranty coverage', max_length=20)),
                ('warranty_number', models.CharField(blank=True, help_text='Warranty reference number', max_length=100)),
                ('start_date', models.DateField(help_text='Warranty start date')),
                ('end_date', models.DateField(help_text='Warranty end date')),
                ('coverage_description', models.TextField(help_text='Description of what is covered')),
                ('terms_conditions', models.TextField(blank=True, help_text='Terms and conditions')),
                ('contact_person', models.CharField(blank=True, help_text='Contact person for warranty claims', max_length=100)),
                ('contact_phone', models.CharField(blank=True, help_text='Contact phone number', max_length=20)),
                ('contact_email', models.EmailField(blank=True, help_text='Contact email address', max_length=254)),
                ('is_active', models.BooleanField(default=True, help_text='Whether warranty is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('device', models.ForeignKey(help_text='Device covered by this warranty', on_delete=django.db.models.deletion.CASCADE, related_name='warranties', to='devices.device')),
            ],
            options={
                'verbose_name': 'Warranty',
                'verbose_name_plural': 'Warranties',
                'db_table': 'devices_warranty',
                'ordering': ['-end_date'],
            },
        ),
    ]
