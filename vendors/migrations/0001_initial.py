# Generated by Django 4.2.7 on 2025-08-17 09:42

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_code', models.CharField(help_text='Unique vendor identification code (e.g., VND001, DELL001)', max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Vendor code must be 3-20 characters, uppercase letters and numbers only.', regex='^[A-Z0-9]{3,20}$')])),
                ('name', models.CharField(help_text='Full company/vendor name', max_length=200)),
                ('trade_name', models.CharField(blank=True, help_text='Trade name if different from company name', max_length=200)),
                ('vendor_type', models.CharField(choices=[('SUPPLIER', 'Equipment Supplier'), ('MANUFACTURER', 'Manufacturer'), ('MAINTENANCE', 'Maintenance Service Provider'), ('SUPPORT', 'Technical Support Provider'), ('INSTALLATION', 'Installation Service Provider'), ('CONSULTANT', 'IT Consultant'), ('OTHER', 'Other')], default='SUPPLIER', help_text='Type of vendor or service provider', max_length=20)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('SUSPENDED', 'Suspended'), ('BLACKLISTED', 'Blacklisted')], default='ACTIVE', help_text='Current vendor status', max_length=15)),
                ('contact_person', models.CharField(help_text='Primary contact person name', max_length=100)),
                ('contact_designation', models.CharField(blank=True, help_text='Designation of contact person (e.g., Sales Manager, Technical Lead)', max_length=100)),
                ('phone_primary', models.CharField(help_text='Primary contact phone number', max_length=17, validators=[django.core.validators.RegexValidator(message='Enter a valid Bangladeshi mobile number (11 digits starting with 01, e.g., 01712345678)', regex='^(\\+880|880|0)?1[3-9]\\d{8}$')])),
                ('phone_secondary', models.CharField(blank=True, help_text='Secondary contact phone number', max_length=17, validators=[django.core.validators.RegexValidator(message='Enter a valid Bangladeshi mobile number (11 digits starting with 01, e.g., 01712345678)', regex='^(\\+880|880|0)?1[3-9]\\d{8}$')])),
                ('email_primary', models.EmailField(help_text='Primary contact email address', max_length=254)),
                ('email_secondary', models.EmailField(blank=True, help_text='Secondary contact email address', max_length=254)),
                ('address', models.TextField(help_text='Complete vendor address')),
                ('city', models.CharField(default='Dhaka', help_text='City where vendor is located', max_length=100)),
                ('district', models.CharField(default='Dhaka', help_text='District/State where vendor is located', max_length=100)),
                ('country', models.CharField(default='Bangladesh', help_text='Country where vendor is located', max_length=100)),
                ('postal_code', models.CharField(blank=True, help_text='Postal/ZIP code', max_length=20)),
                ('business_registration_no', models.CharField(blank=True, help_text='Government business registration number', max_length=100)),
                ('tax_identification_no', models.CharField(blank=True, help_text='Tax identification number (TIN)', max_length=100)),
                ('website', models.URLField(blank=True, help_text='Company website URL')),
                ('specialization', models.TextField(blank=True, help_text='Areas of specialization or products/services offered')),
                ('service_categories', models.TextField(blank=True, help_text='Specific service categories (comma-separated)')),
                ('performance_rating', models.DecimalField(blank=True, decimal_places=2, help_text='Performance rating out of 5.00', max_digits=3, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the vendor')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this vendor is currently active')),
                ('is_preferred', models.BooleanField(default=False, help_text='Designates whether this is a preferred vendor')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when vendor was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when vendor was last updated')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this vendor record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_vendors', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this vendor record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_vendors', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vendor',
                'verbose_name_plural': 'Vendors',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['vendor_code'], name='vendors_ven_vendor__13e35b_idx'), models.Index(fields=['name'], name='vendors_ven_name_0d60a8_idx'), models.Index(fields=['vendor_type'], name='vendors_ven_vendor__c9b79e_idx'), models.Index(fields=['status'], name='vendors_ven_status_2dcb2a_idx'), models.Index(fields=['is_active'], name='vendors_ven_is_acti_5c8a37_idx'), models.Index(fields=['is_preferred'], name='vendors_ven_is_pref_36c917_idx'), models.Index(fields=['city'], name='vendors_ven_city_4e1b89_idx'), models.Index(fields=['created_at'], name='vendors_ven_created_c4e3ec_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='vendor',
            constraint=models.CheckConstraint(check=models.Q(('performance_rating__gte', 0), ('performance_rating__lte', 5)), name='vendors_performance_rating_range'),
        ),
    ]
