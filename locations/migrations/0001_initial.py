# Generated by Django 4.2.7 on 2025-08-17 09:42

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Block name or designation (e.g., East Block, West Wing, Section A)', max_length=50)),
                ('code', models.CharField(help_text='Short code for the block (e.g., EB, WW, SA)', max_length=10)),
                ('description', models.TextField(blank=True, help_text='Description of the block and its purpose')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this block is currently in use')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Block',
                'verbose_name_plural': 'Blocks',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the building (e.g., Main Parliament Building, Secretariat Building)', max_length=100, unique=True)),
                ('code', models.CharField(help_text='Short code for the building (e.g., MPB, SB)', max_length=10, unique=True)),
                ('description', models.TextField(blank=True, help_text='Additional description about the building')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this building is currently in use')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Building',
                'verbose_name_plural': 'Buildings',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Floor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Floor name or number (e.g., Ground Floor, 1st Floor, Basement)', max_length=50)),
                ('floor_number', models.IntegerField(help_text='Numeric representation of floor level (negative for basement)', validators=[django.core.validators.MinValueValidator(-10), django.core.validators.MaxValueValidator(50)])),
                ('description', models.TextField(blank=True, help_text='Description of what this floor contains')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this floor is currently accessible')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Floor',
                'verbose_name_plural': 'Floors',
                'ordering': ['floor_number'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, help_text='Latitude coordinate (-90 to 90 degrees)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)])),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, help_text='Longitude coordinate (-180 to 180 degrees)', max_digits=11, null=True, validators=[django.core.validators.MinValueValidator(-180.0), django.core.validators.MaxValueValidator(180.0)])),
                ('name', models.CharField(help_text='Human-readable location name', max_length=200)),
                ('location_code', models.CharField(help_text='Unique location identifier code', max_length=50, unique=True)),
                ('address', models.TextField(blank=True, help_text='Full address or location description')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this location')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this location is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('block', models.ForeignKey(blank=True, help_text='Associated block or section (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='locations.block')),
                ('building', models.ForeignKey(blank=True, help_text='Associated building (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='locations.building')),
                ('floor', models.ForeignKey(blank=True, help_text='Associated floor (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='locations.floor')),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
                'ordering': ['location_code', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Room name or number (e.g., Conference Room 1, Server Room A)', max_length=100)),
                ('room_number', models.CharField(help_text='Official room number or identifier', max_length=20)),
                ('room_type', models.CharField(choices=[('office', 'Office'), ('meeting', 'Meeting Room'), ('storage', 'Storage'), ('server', 'Server Room'), ('Data Center', 'Data Center Room'), ('conference', 'Conference Room'), ('hall', 'Hall'), ('oath', 'Oath Room'), ('chamber', 'Chamber'), ('lobby', 'Lobby'), ('utility', 'Utility Room'), ('washroom', 'WashRoom'), ('pantry', 'Pantry Room'), ('other', 'Other')], default='office', help_text='Type or category of the room', max_length=20)),
                ('capacity', models.PositiveIntegerField(blank=True, help_text='Maximum capacity of people/equipment this room can hold', null=True)),
                ('area_sqft', models.DecimalField(blank=True, decimal_places=2, help_text='Area of the room in square feet', max_digits=10, null=True)),
                ('description', models.TextField(blank=True, help_text='Description of the room and its current use')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this room is currently available for use')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Room',
                'verbose_name_plural': 'Rooms',
                'ordering': ['room_number', 'name'],
                'indexes': [models.Index(fields=['room_number'], name='locations_r_room_nu_a7cb67_idx'), models.Index(fields=['room_type'], name='locations_r_room_ty_2ac6cf_idx'), models.Index(fields=['is_active'], name='locations_r_is_acti_0b835b_idx')],
            },
        ),
        migrations.CreateModel(
            name='Office',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Office name (e.g., IT Department, Secretary Office)', max_length=100)),
                ('office_code', models.CharField(help_text='Unique office code (e.g., IT-001, SEC-001)', max_length=20, unique=True)),
                ('office_type', models.CharField(choices=[('wing', 'Wing Office'), ('branch', 'Branch Office'), ('section', 'Section Office'), ('secretary', 'Secretary Office'), ('speaker', 'Speaker Office'), ('deputy speaker', 'Deputy Speaker Office'), ('chief Whip', 'Chief Whip Office'), ('whip', 'Whip Office'), ('chairman', 'SC Chairman Office'), ('mp', 'MP Office'), ('unit', 'Unit'), ('store', 'Store Office'), ('project', 'Project Office'), ('other', 'Other')], default='department', help_text='Type of administrative office', max_length=20)),
                ('head_of_office', models.CharField(blank=True, help_text='Name of the officer in charge', max_length=100)),
                ('contact_number', models.CharField(blank=True, help_text='Official contact number for this office', max_length=20)),
                ('email', models.EmailField(blank=True, help_text='Official email address', max_length=254)),
                ('description', models.TextField(blank=True, help_text='Description of office functions and responsibilities')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this office is currently operational')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Office',
                'verbose_name_plural': 'Offices',
                'ordering': ['office_code', 'name'],
                'indexes': [models.Index(fields=['office_code'], name='locations_o_office__d86dfc_idx'), models.Index(fields=['office_type'], name='locations_o_office__4db9eb_idx'), models.Index(fields=['is_active'], name='locations_o_is_acti_8887d0_idx')],
            },
        ),
        migrations.CreateModel(
            name='LocationQRCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qr_code_id', models.UUIDField(default=uuid.uuid4, help_text='Unique QR code identifier', unique=True)),
                ('qr_code', models.ImageField(help_text='Generated QR code image', upload_to='qrcodes/locations/')),
                ('qr_data', models.TextField(help_text='Data encoded in the QR code')),
                ('size', models.PositiveIntegerField(default=200, help_text='QR code size in pixels')),
                ('format', models.CharField(default='PNG', help_text='Image format', max_length=10)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this QR code is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(help_text='Location this QR code represents', on_delete=django.db.models.deletion.CASCADE, related_name='qr_codes', to='locations.location')),
            ],
            options={
                'verbose_name': 'Location QR Code',
                'verbose_name_plural': 'Location QR Codes',
                'db_table': 'locations_locationqrcode',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='location',
            name='office',
            field=models.ForeignKey(blank=True, help_text='Associated office (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='locations.office'),
        ),
        migrations.AddField(
            model_name='location',
            name='room',
            field=models.ForeignKey(blank=True, help_text='Associated room (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='locations.room'),
        ),
        migrations.AddIndex(
            model_name='floor',
            index=models.Index(fields=['floor_number'], name='locations_f_floor_n_8d7587_idx'),
        ),
        migrations.AddIndex(
            model_name='floor',
            index=models.Index(fields=['is_active'], name='locations_f_is_acti_3ba05a_idx'),
        ),
        migrations.AddIndex(
            model_name='building',
            index=models.Index(fields=['code'], name='locations_b_code_d04e9e_idx'),
        ),
        migrations.AddIndex(
            model_name='building',
            index=models.Index(fields=['is_active'], name='locations_b_is_acti_5d73fd_idx'),
        ),
        migrations.AddIndex(
            model_name='block',
            index=models.Index(fields=['code'], name='locations_b_code_b88bac_idx'),
        ),
        migrations.AddIndex(
            model_name='block',
            index=models.Index(fields=['is_active'], name='locations_b_is_acti_eb30e9_idx'),
        ),
        migrations.AddIndex(
            model_name='locationqrcode',
            index=models.Index(fields=['location', 'is_active'], name='locations_l_locatio_a01c9b_idx'),
        ),
        migrations.AddIndex(
            model_name='locationqrcode',
            index=models.Index(fields=['qr_code_id'], name='locations_l_qr_code_c8caeb_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['location_code'], name='locations_l_locatio_19f3f3_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['latitude', 'longitude'], name='locations_l_latitud_739c67_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['is_active'], name='locations_l_is_acti_9f2958_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['building'], name='locations_l_buildin_54f000_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['office'], name='locations_l_office__5f7608_idx'),
        ),
    ]
